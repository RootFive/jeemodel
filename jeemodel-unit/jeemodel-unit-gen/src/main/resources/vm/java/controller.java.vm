package ${packageName}.controller;

#if($table.sub)
import java.util.List;
import java.util.stream.Collectors;
#else
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.ArrayUtils;
#end
import javax.servlet.http.HttpServletResponse;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.jeemodel.unit.manage.core.annotation.Log;
import com.jeemodel.core.web.controller.BaseController;
import com.jeemodel.unit.manage.core.enums.BusinessType;
import com.jeemodel.bean.http.Pong;
import com.jeemodel.bean.http.PongData;
import com.jeemodel.bean.http.PongUtils;
import ${packageName}.bean.dto.${ClassName}DTO;
import ${packageName}.bean.dto.${ClassName}EditSave;
#if($table.sub)
import ${packageName}.bean.dto.${ClassName}Inc${subClassName}List;
#end
import ${packageName}.bean.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;
#if($table.sub)
import ${packageName}.bean.domain.${ClassName}Inc${subClassName}Domain;
#end
#if($table.crud || $table.sub)
import com.jeemodel.bean.http.PongTable;
import com.jeemodel.data.utils.PageUtils;
import com.jeemodel.unit.manage.core.utils.poi.ExcelUtil;
#end

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * ${functionName}后台管理API Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Api(tags = "【Jeemodel-XXX模块】-${functionName}")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private I${ClassName}Service ${className}Service;

#if($table.crud || $table.sub)
    @ApiOperation(value = "查询-${functionName}-列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
    public PongTable<${ClassName}DTO> list(${ClassName} ${className}) {
        PageUtils.startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
		
        List<${ClassName}DTO> listDTO = list.stream().map(${ClassName}::toDTO).collect(Collectors.toList());
        return PageUtils.okTable(listDTO);
    }


    @ApiOperation(value = "导出-${functionName}-列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        List<${ClassName}DTO> listDTO = list.stream().map(${ClassName}::toDTO).collect(Collectors.toList());
        ExcelUtil<${ClassName}DTO> util = new ExcelUtil<>(${ClassName}DTO.class);
        util.exportExcel(response, listDTO, "${functionName}数据");
    }
	
#end	

#if($table.sub)
    @ApiOperation(value = "查询-${functionName}-详情")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public PongData<${ClassName}Inc${subClassName}List> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        ${ClassName}Inc${subClassName}Domain ${className}Inc${subClassName}Domain = ${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
        ${ClassName}Inc${subClassName}List ${className}Inc${subClassName} = ${className}Inc${subClassName}Domain==null ? null:${className}Inc${subClassName}Domain.toDTO();
        return PongUtils.okData(${className}Inc${subClassName});
    }
#else
    @ApiOperation(value = "查询-${functionName}-详情")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public PongData<${ClassName}DTO> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        ${ClassName} ${className} = ${className}Service.getById(${pkColumn.javaField});
        ${ClassName}DTO ${className}DTO = ${className}==null ? null:${className}.toDTO();
        return PongUtils.okData(${className}DTO);
    }
#end

    @ApiOperation(value = "新增-${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public Pong add(@RequestBody ${ClassName}EditSave ${className}EditSave) {
        return PongUtils.result(${className}Service.insert${ClassName}(${className}EditSave));
    }

#foreach ($column in $columns)
#if($column.javaField == 'updateTime')
    @ApiOperation(value = "修改-${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public Pong edit(@RequestBody ${ClassName}EditSave ${className}EditSave) {
        return PongUtils.result(${className}Service.update${ClassName}(${className}EditSave));
    }	
#break
#end
#end		

    @ApiOperation(value = "删除-${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public Pong remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
#if($table.sub)
        return PongUtils.result(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
#else
        if (ArrayUtils.isEmpty(${pkColumn.javaField}s)) {
            return PongUtils.fail("请选择需要删除的数据");
        }
        List<${pkColumn.javaType}> ${pkColumn.javaField}List = Arrays.asList(${pkColumn.javaField}s);
        return PongUtils.result(${className}Service.removeByIds(${pkColumn.javaField}List));
#end	
    }
}
